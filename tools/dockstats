#!/usr/bin/env python3

import os
from pwd import getpwuid
from argparse import ArgumentParser
from configparser import ConfigParser
from shutil import which
from subprocess import Popen, PIPE, STDOUT, CalledProcessError
from time import sleep
import json
import urllib.request
from urllib.error import URLError, HTTPError
from math import ceil, floor

# ----------------------------------------------------------------------------
# Defaults
# ----------------------------------------------------------------------------

INI_FILE = '.swarm.ini'
DOCKER_FILE = '.docker/config.json'

IOS_DELTA_WAIT = 3  # seconds

DRED = "0;31"
LRED = "1;31"
DGREEN = "0;32"
LGREEN = "1;32"
DBLUE = "0;34"
LBLUE = "1;34"
DCYAN = "0;36"
LCYAN = "1;36"
DYELLOW = "0;33"
LYELLOW = "1;33"
DMAGENTA = "0;35"
LMAGENTA = "1;35"
DGRAY = "0;37"
LGRAY = "1;37"


def scolor(color, s):
    '''
    Print in color
    '''
    return '\033[{0}m{1}\033[0m'.format(color, s)


def pct2Int(p):
    '''
    Convert a percentage to an int
    '''
    if '%' in p:
        val, unit = p.split('%')
        return ceil(float(val) * 1.0)
    return -1


def pct2Bar(p):
    '''
    Convert an integer percentage to a bar chart
    '''
    if p > 100:
        return scolor(LRED, '##[{:03}%]##'.format(p))
    else:
        u = int(p / 10)
    f = 10 - u
    if u > 9:
        col = LRED
    elif u > 7:
        col = LYELLOW
    else:
        col = LGREEN
    return '{0}{1}'.format(scolor(col, '#' * u), ' ' * f)


def xiB2MB(m):
    '''
    Convert mem to int MBs
    '''
    if 'G' in m:
        val, unit = m.split('G')
        return int(float(val) * 1024.0)
    elif 'M' in m:
        val, unit = m.split('M')
        return int(float(val) * 1.0)
    elif 'k' in m:
        return 1
    elif 'B' in m:
        return 0
    return -1


def load_ini_file(ini_file):
    '''
    Load ini file settings
    '''
    username = getpwuid(os.getuid()).pw_name
    ini_file = '{0}/{1}'.format(os.path.expanduser("~"), ini_file)
    if not os.path.isfile(ini_file):
        print("ERROR: Missing ini file '{0}', creating one...".
              format(ini_file))
        config = ConfigParser(allow_no_value=True)
        config.add_section('default_settings')
        config.set('default_settings', 'utokentome_user', username)
        config.set('default_settings', 'tenant', 'shm')
        with open(ini_file, 'w') as fp:
            config.write(fp)
        print('-----')
        with open(ini_file, 'r') as fp:
            print(fp.read())
        print('-----')
        exit(1)
    else:
        config = ConfigParser()
        config.read(ini_file)
        utokentome_user = config.get('default_settings', 'utokentome_user')
        tenant = config.get('default_settings', 'tenant')
    return (utokentome_user, tenant)


def run_utokentome(user):
    '''
    Run utokentome
    '''
    utokentome = which("utokentome")
    if utokentome is None:
        print("ERROR: You need to install the 'utokentome' tool")
        print("       See the wiki : http://u.prod.oih.p.fti.net/yxQB-g6C")
        exit(2)
    os.system('{0} -u {1}>/dev/null'.format(utokentome, user))


def get_quotas(docker_file, docker_host, tenant):
    '''
    Get quotas (for each stack)
    '''
    docker_file = '{0}/{1}'.format(os.path.expanduser("~"), docker_file)
    with open(docker_file) as json_data:
        d = json.load(json_data)
        token = d['HttpHeaders']['Authorization']
        quota_url = "http://{0}/swarm_controller/quotas".format(docker_host)
        req = urllib.request.Request(quota_url)
    req.add_header('Authorization', token)
    try:
        with urllib.request.urlopen(req) as f:
            allquotas = json.loads(f.read().decode('utf-8'))
    except (URLError, HTTPError) as excp:
        print("\nFailed to get quotas : {0}\n".format(excp))
        exit(3)
    quotas = {}
    for stack in allquotas:
        if allquotas[stack]['Tenant'] == tenant:
            quotas[stack] = allquotas[stack]
    if len(quotas):
        return quotas
    else:
        quotas = {}
        quotas['none'] = {}
        quotas['none']['CpuQuota'] = {}
        quotas['none']['CpuQuota']['reserved'] = 0
        quotas['none']['CpuQuota']['quota'] = 0
        quotas['none']['Memory'] = {}
        quotas['none']['Memory']['reserved'] = 0
        quotas['none']['Memory']['quota'] = 0
        return quotas


def docker_ps(stack, docker_host):
    '''
    get docker ps containers ids
    '''
    ps_format = '{{.ID}}'
    cmd = "docker ps --format '{0}'".format(ps_format)
    try:
        if stack != 'local':
            cmd = '{0} --filter label=com.<domain>.stack.name={1}'.\
                  format(cmd, stack)
        p = Popen(cmd, shell=True, stdout=PIPE, stderr=STDOUT,
                  universal_newlines=True, close_fds=True)
        output = p.stdout.readlines()
        p.communicate()
        containers_filtered = []
        if len(output) == 0:
            containers_filtered.append('none')
            return containers_filtered
        for line in output:
            if line.find('error during connect') == 0:
                print('\nError: cannot connect to docker ({0})\n'.
                      format(docker_host))
                exit(4)
            container = line.rstrip('\n')
            containers_filtered.append(container[0:12])
        return containers_filtered
    except CalledProcessError as e:
        print("{0} execution returned the following error ({1}): ".
              format(cmd, e))
        for line in output:
            print(line.rstrip('\n'))
        exit(5)


def docker_stats(stack, docker_host, containers):
    '''
    get docker containers stats
    '''
    containers_s = {}
    if 'none' in containers:
        containers_s[stack] = {}
        containers_s[stack]["none"] = {}
        containers_s[stack]["none"][0] = {}
        containers_s[stack]["none"][0]["    none    "] = \
            {'cpu': 0,
             'mem': 0,
             'mem_used': 0,
             'mem_total': 0,
             'net_in': 0,
             'net_out': 0,
             'block_in': 0,
             'block_out': 0,
             'nbpids': 0}
        totals = {stack: {'cpu_total_used': 0,
                          'cpu_total_total': 0,
                          'mem_total_used': 0,
                          'mem_total_total': 0}}
        return [containers_s, totals]
    stats_format = "{{.ID}}|{{.Name}}|{{.CPUPerc}}|{{.MemUsage}}|"\
                   "{{.MemPerc}}|{{.NetIO}}|{{.BlockIO}}|{{.PIDs}}"
    cmd = "docker stats --no-stream --format '{0}' ".format(stats_format)
    cmd += ' '.join(containers)
    if stack != 'local':
        cpu_total_used = 0
        cpu_total_total = 0
        mem_total_used = 0
        mem_total_total = 0
    try:
        p = Popen(cmd, shell=True, stdout=PIPE, stderr=STDOUT,
                  universal_newlines=True, close_fds=True)
        output = p.stdout.readlines()
        p.communicate()
        for line in output:
            line = line.rstrip('\n')
            if line.find('error during connect') == 0:
                print('\nError: cannot connect to docker ({0})\n'.
                      format(docker_host))
                exit(6)
            if line[0].isalnum() and line:
                container = line.split('|')
                c_id = container[0][0:12]
                c_name = container[1]
                try:
                    c_name, c_instance_num = c_name.rsplit('_', 1)
                except ValueError:
                    c_instance_num = '0'
                if not c_instance_num.isdigit():
                    c_name = '{0}_{1}'.format(c_name, c_instance_num)
                    c_instance_num = '0'
                c_instance_num = int(c_instance_num)
                c_cpu = container[2]
                c_mem_used, c_mem_total = container[3].split(' / ')
                c_mem = container[4]
                c_net_in, c_net_out = container[5].split(' / ')
                c_block_in, c_block_out = container[6].split(' / ')
                c_nbpids = container[7]
                if stack not in containers_s:
                    containers_s[stack] = {}
                if c_name not in containers_s[stack]:
                    containers_s[stack][c_name] = {}
                if c_instance_num not in containers_s[stack][c_name]:
                    containers_s[stack][c_name][c_instance_num] = {}
                containers_s[stack][c_name][c_instance_num][c_id] = \
                    {'cpu': pct2Int(c_cpu),
                     'mem': pct2Int(c_mem),
                     'mem_used': xiB2MB(c_mem_used),
                     'mem_total': xiB2MB(c_mem_total),
                     'net_in': xiB2MB(c_net_in),
                     'net_out': xiB2MB(c_net_out),
                     'block_in': xiB2MB(c_block_in),
                     'block_out': xiB2MB(c_block_out),
                     'nbpids': c_nbpids}
                if stack != 'local':
                    cpu_total_used += pct2Int(c_cpu)
                    cpu_total_total += 100
                    mem_total_used += xiB2MB(c_mem_used)
                    mem_total_total += xiB2MB(c_mem_total)
    except CalledProcessError as e:
        print("{0} execution returned the following error ({1}): ".
              format(cmd, e))
        for line in output:
            print(line.rstrip('\n'))
        exit(7)
    # If I/Os, compute the delta
    if args.ios:
        # print('Calculating I/Os deltas ({0}s)...'.format(IOS_DELTA_WAIT))
        sleep(IOS_DELTA_WAIT)
        try:
            p = Popen(cmd, shell=True, stdout=PIPE, stderr=STDOUT,
                      universal_newlines=True, close_fds=True)
            output = p.stdout.readlines()
            p.communicate()
            for line in output:
                line = line.rstrip('\n')
                if line.find('error during connect') == 0:
                    print('\nError: cannot connect to docker ({0})\n'.
                          format(docker_host))
                    exit(8)
                if line[0].isalnum() and line:
                    container = line.split('|')
                    c_id = container[0][0:12]
                    c_name, c_instance_num = container[1].rsplit('_', 1)
                    c_instance_num = int(c_instance_num)
                    c_net_in, c_net_out = container[5].split(' / ')
                    c_block_in, c_block_out = container[6].split(' / ')
                    container_pp = containers_s[stack][c_name][c_instance_num]
                    container_p = container_pp[c_id]
                    container_p['net_in'] = int((xiB2MB(c_net_in) -
                                                 container_p['net_in']) /
                                                IOS_DELTA_WAIT)
                    container_p['net_out'] = int((xiB2MB(c_net_out) -
                                                  container_p['net_out']) /
                                                 IOS_DELTA_WAIT)
                    container_p['block_in'] = int((xiB2MB(c_block_in) -
                                                   container_p['block_in']) /
                                                  IOS_DELTA_WAIT)
                    container_p['block_out'] = int((xiB2MB(c_block_out) -
                                                    container_p['block_out']) /
                                                   IOS_DELTA_WAIT)
        except CalledProcessError as e:
            print("{0} execution returned the following error ({1}): ".
                  format(cmd, e))
            for line in output:
                print(line.rstrip('\n'))
            exit(9)
    if stack != 'local':
        totals = {stack: {'cpu_total_used': cpu_total_used,
                          'cpu_total_total': cpu_total_total,
                          'mem_total_used': mem_total_used,
                          'mem_total_total': mem_total_total}}
    else:
        totals = {}
    return [containers_s, totals]


def display_containers_stats(containers, totals, quotas):
    '''
    Display containers
    '''
    if 'local' in containers and 'none' in containers['local']:
        print("\n No running container on 'localhost'")
        return
    # Find max lengths
    maxlen_stack = 5
    maxlen_name = 9
    for stack in sorted(containers):
        if stack != 'local':
            maxlen = len(stack)
            if maxlen > maxlen_stack:
                maxlen_stack = maxlen
        for container in sorted(containers[stack]):
            maxlen = len(container)
            if maxlen > maxlen_name:
                maxlen_name = maxlen
    # Extra header
    if args.ios:
        IOS_HEADER = " {0:^15} | {1:^15} |".\
                     format('NET I/O (MB/s)', 'BLK I/O (MB/s)')
        EXTRA_SEPARATOR = "-----------------+-----------------+"
    else:
        IOS_HEADER = ""
        EXTRA_SEPARATOR = ""
    # Print containers stats
    for stack in sorted(containers):
        print()
        if stack != 'local':
            sep = " {0}-+-{1}-+-{2}-+-{3}-+{4}-{5}".\
                  format("-" * maxlen_stack, "-" * 12, "-" * 10, "-" * 16,
                         EXTRA_SEPARATOR, "-" * maxlen_name)
            print(sep)
            print(" {0} | {1:^12} | {2:^10} | {3:^16} |{4} {5}".
                  format('STACK'.center(maxlen_stack), 'ID', 'CPU', 'RAM',
                         IOS_HEADER, 'CONTAINER'.center(maxlen_name)))
            print(sep)
        else:
            sep = " {0}-+-{1}-+-{2}-+{3}-{4}".\
                  format("-" * 12, "-" * 10, "-" * 16, EXTRA_SEPARATOR,
                         "-" * maxlen_name)
            print(sep)
            print(" {0:^12} | {1:^10} | {2:^16} |{3} {4}".
                  format('ID', 'CPU', 'RAM (MB)', IOS_HEADER, 'CONTAINER'))
            print(sep)
        for container in sorted(containers[stack]):
            for instance_num in sorted(containers[stack][container]):
                for c_id in containers[stack][container][instance_num]:
                    p_container = "{0}".format(scolor(DBLUE, container))
                    if instance_num > 0:
                        group, service = container.split('_', 1)
                        p_container = "{0}_{1}".format(scolor(DBLUE, group),
                                                       scolor(LBLUE, service))
                    if instance_num > 1:
                        p_container = "{0}-{1}".\
                                      format(p_container, instance_num)
                    instance = containers[stack][container][instance_num][c_id]
                    if stack != 'local':
                        p_stack = scolor(LMAGENTA, stack.ljust(maxlen_stack))
                    p_id = c_id
                    p_cpu = instance['cpu']
                    p_mem = instance['mem']
                    # p_mem_used = instance['mem_used']
                    p_mem_total = instance['mem_total']
                    p_net_in = instance['net_in']
                    p_net_out = instance['net_out']
                    p_block_in = instance['block_in']
                    p_block_out = instance['block_out']
                    # p_nbpids = instance['nbpids']
                    if args.ios:
                        IOS = ' {0:>6} / {1:<6} | {2:>6} / {3:<6} |'.\
                              format(p_net_in, p_net_out, p_block_in,
                                     p_block_out)
                    else:
                        IOS = ''
                    if stack != 'local':
                        print(' {0} | {1} | {2} | {3} {4:5} |{5} {6}'.
                              format(p_stack, p_id, pct2Bar(p_cpu),
                                     pct2Bar(p_mem), p_mem_total, IOS,
                                     p_container))
                    else:
                        print(' {0} | {1} | {2} {3:5} |{4} {5}'.
                              format(p_id, pct2Bar(p_cpu),
                                     pct2Bar(p_mem), p_mem_total, IOS,
                                     p_container))
        if stack != 'local':
            print(" {0}-+-{1}-+-{2}-+-{3}-+{4}-{5}".
                  format("-" * maxlen_stack, "-" * 12, "-" * 10, "-" * 16,
                         EXTRA_SEPARATOR, "-" * maxlen_name))
            if totals[stack]['cpu_total_total'] > 0:
                cpu_ftr = '~ {0}%'.\
                          format(int((totals[stack]['cpu_total_used'] * 100) /
                                     totals[stack]['cpu_total_total']))
            else:
                cpu_ftr = 'none'
            if totals[stack]['cpu_total_total'] > 0:
                mem_ftr = '{0}% of {1}'.\
                          format(int((totals[stack]['mem_total_used'] * 100) /
                                     totals[stack]['mem_total_total']),
                                 totals[stack]['mem_total_total'])
            else:
                mem_ftr = 'none'
            print(' {0}   {1:^12} | {2:^10} | {3:>16} |'.
                  format(' ' * maxlen_stack, '', cpu_ftr, mem_ftr))
            sep = " {0} +-{1:^12}-+-{2}-+-{3}-+".\
                  format(' ' * maxlen_stack, '-' * 12, '-' * 10, '-' * 16)
            print(sep)
            cpu_reserved = ceil(quotas[stack]['CpuQuota']['reserved'] /
                                100000)
            cpu_max = floor(quotas[stack]['CpuQuota']['quota'] / 100000)
            cpu_quota = "{0} / {1}".format(cpu_reserved, cpu_max)
            mem_reserved = ceil(quotas[stack]['Memory']['reserved'] /
                                1048576)
            mem_max = floor(quotas[stack]['Memory']['quota'] /
                            1048576)
            mem_quota = "{0} / {1}".format(mem_reserved, mem_max)
            print(' {0} | {1:^12} | {2:^10} | {3:^16} |'.
                  format(' ' * maxlen_stack, 'swarm quotas', cpu_quota,
                         mem_quota))
            print(sep)
        else:
            print(" {0}-+-{1}-+-{2}-+-{3}".
                  format("-" * 12, "-" * 10, "-" * 16, "-" * maxlen_name))
        print()

# Parse args
parser = ArgumentParser(description='Docker ps beautifier.')
parser.add_argument('-t', '--tenant', type=str, help='set the tenant')
parser.add_argument('-s', '--stack', dest='stack', default=None,
                    action='store', type=str, help='set the stack')
parser.add_argument('-i', '--ios', action='store_true', help='calculate IOs')
args = parser.parse_args()

# Load settings
utokentome_user, tenant = load_ini_file(INI_FILE)
if args.tenant:
    tenant = args.tenant

# If on swarm, run utokentome and get available stacks
if 'DOCKER_HOST' in os.environ:
    docker_host = os.environ['DOCKER_HOST']
    run_utokentome(utokentome_user)
    quotas = get_quotas(DOCKER_FILE, docker_host, tenant)
    if args.stack is not None:
        quotas = {args.stack: quotas[args.stack]}
else:
    docker_host = "local"
    quotas = ['local']


# Get containers stats
all_containers = {}
all_containers_stats = {}
all_containers_totals = {}
for stack in quotas:
    containers = docker_ps(stack, docker_host)
    containers_stats, containers_totals = docker_stats(stack, docker_host,
                                                       containers)
    all_containers_stats.update(containers_stats)
    all_containers_totals.update(containers_totals)

# Display containers stats
display_containers_stats(all_containers_stats, all_containers_totals,
                         quotas)
